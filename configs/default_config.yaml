system_model:
  N: 8  # number of antennas
  M: 3   # number of sources
  T: 200  # number of snapshots
  snr: 10  # signal-to-noise ratio in dB
  field_type: "far"  # "near" or "far"
  signal_nature: "non-coherent"  # "non-coherent" or "coherent"
  signal_type: "narrowband"  # "narrowband" only supported currently
  wavelength: 1  # carrier wavelength in meters
  eta: 0.0  # steering vector uniform error variance
  bias: 0  # steering vector bias error
  sv_noise_var: 0.0  # steering vector additive gaussian error noise variance
  doa_range: 60  # range of DOA values [-doa_range, doa_range]
  doa_resolution: 1  # resolution of DOA values in degrees
  max_range_ratio_to_limit: 0.5  # ratio of maximum range to Fraunhofer distance
  range_resolution: 1  # resolution of range values in meters

dataset:
  samples_size: 256  # overall dataset size
  test_validation_train_split: [0.2, 0.2, 0.6]  # proportions for [test, validation, train] datasets
  create_data: true  # whether to create new data or use existing data
  save_dataset: false  # whether to save the dataset
  true_doa_train: null  # predefined angles for training (null for random)
  true_range_train: null  # predefined ranges for training (null for random)
  true_doa_test: null  # predefined angles for testing (null for random)
  true_range_test: null  # predefined ranges for testing (null for random)

model:
  type: "SubspaceNet"  # SubspaceNet, DCD-MUSIC
  params:
    diff_method: "esprit"  # esprit, music_1D, music_2D, beamformer
    train_loss_type: "rmspe"  # music_spectrum, rmspe
    tau: 8  # number of autocorrelation lags
    field_type: "Far"  # Far, Near

    regularization: "null"  # aic, mdl, threshold, null
    variant: "small"  # big, small
    norm_layer: false
    batch_norm: false

training:
  enabled: True  # whether training is enabled
  epochs: 30
  batch_size: 256
  optimizer: "Adam"  # Adam, SGD
  scheduler: "ReduceLROnPlateau"  # StepLR, ReduceLROnPlateau
  learning_rate: 0.001
  weight_decay: 1e-9
  step_size: 50
  gamma: 0.5
  training_objective: "angle"  # angle, range, (angle, range)
  use_wandb: False
  simulation_name: None
  save_checkpoint: true  # whether to save model checkpoints during training

simulation:
  train_model: false
  evaluate_model: true
  load_model: true
  save_model: true
  plot_results: true
  save_plots: true
  model_path: experiments/results/checkpoints/saved_SubspaceNet_20250517_140017.pt # Path to a trained model file (.pt)
  subspace_methods:
    - "ESPRIT"


evaluation: {}

trajectory:
  enabled: true
  trajectory_type: "random_walk"
  trajectory_length: 30
  random_walk_std_dev: 5  # standard deviation for random walk trajectory (degrees)
  save_trajectory: false
  # Sine acceleration non-linear model parameters (now oscillatory with source-specific patterns)
  sine_accel_omega0: [0.2, 0.3, 0.15]  # Frequency of oscillation (rad/s) - different for each source
  sine_accel_kappa: [0.1, 0.15, 0.08]  # Amplitude of oscillation (rad) - different for each source
  sine_accel_noise_std: 0.01 # Noise standard deviation (rad) - controls randomness

kalman_filter:
  process_noise_std_dev: null  # standard deviation of process noise (degrees), null to use trajectory.random_walk_std_dev
  measurement_noise_std_dev: 1.0e-3  # standard deviation of measurement noise (degrees)
  initial_covariance: 1.0  # initial state covariance 

# Logging configuration
logging:
  level: "INFO"  # Global logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
  subspace_net_level: null  # Override for SubspaceNet loggers (null = use global level)
  kalman_filter_level: null  # Override for Kalman filter loggers (null = use global level)
  torch_level: "WARNING"  # PyTorch logging level (WARNING to reduce noise)
  matplotlib_level: "WARNING"  # Matplotlib logging level (WARNING to reduce noise)
  log_to_file: false  # Whether to log to a file in addition to console
  log_file_path: null  # Path for log file (null = use default)
  log_file_level: "DEBUG"  # Logging level for file output 
