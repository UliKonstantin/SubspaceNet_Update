###############################################################################
# Hybrid Config: Default Training + Nonlinear Tracking parameters
###############################################################################

system_model:
  N: 8  # number of antennas
  M: 3   # number of sources
  T: 200  # number of snapshots
  snr: 10  # signal-to-noise ratio in dB
  field_type: "far"  # "near" or "far"
  signal_nature: "non-coherent"  # "non-coherent" or "coherent"
  signal_type: "narrowband"  # "narrowband" only supported currently
  wavelength: 1  # carrier wavelength in meters
  eta: 0.0  # steering vector uniform error variance
  bias: 0  # steering vector bias error
  sv_noise_var: 0.0  # steering vector additive gaussian error noise variance
  doa_range: 60  # range of DOA values [-doa_range, doa_range]
  doa_resolution: 1  # resolution of DOA values in degrees
  max_range_ratio_to_limit: 0.5  # ratio of maximum range to Fraunhofer distance
  range_resolution: 1  # resolution of range values in meters

dataset:
  samples_size: 4096  # overall dataset size
  test_validation_train_split: [0.1, 0.1, 0.7]  # proportions for [test, validation, train] datasets
  create_data: true  # whether to create new data or use existing data
  save_dataset: false  # whether to save the dataset
  true_doa_train: null  # predefined angles for training (null for random)
  true_range_train: null  # predefined ranges for training (null for random)
  true_doa_test: null  # predefined angles for testing (null for random)
  true_range_test: null  # predefined ranges for testing (null for random)

model:
  type: "SubspaceNet"  # SubspaceNet, DCD-MUSIC
  params:
    diff_method: "esprit"  # esprit, music_1D, music_2D, beamformer
    train_loss_type: "rmspe"  # music_spectrum, rmspe
    tau: 8  # number of autocorrelation lags
    field_type: "Far"  # Far, Near
    regularization: "null"  # aic, mdl, threshold, null
    variant: "small"  # big, small
    norm_layer: false
    batch_norm: false

training:
  enabled: True  # whether training is enabled
  epochs: 10
  batch_size: 256
  optimizer: "Adam"  # Adam, SGD
  scheduler: "ReduceLROnPlateau"  # StepLR, ReduceLROnPlateau
  learning_rate: 0.001
  weight_decay: 1e-9
  step_size: 50
  gamma: 0.5
  training_objective: "angle"  # angle, range, (angle, range)
  use_wandb: False
  simulation_name: "tracking_sineaccel_base_model"  # Base name - parameters will be added automatically
  save_checkpoint: true  # whether to save model checkpoints during training

simulation:
  train_model: true
  evaluate_model: true
  load_model: false
  save_model: true
  plot_results: true
  save_plots: true
  model_path: null # Path to a trained model file (.pt)
  subspace_methods:
    - "ESPRIT"
  output_dir: "experiments/results/${training.simulation_name}"  # Output directory with simulation name variable

evaluation: 
  save_results: true
  results_format: "json"
  detailed_metrics: true
  plot_performance_curve: true

# The following sections are from the nonlinear tracking config
# Trajectory configuration
trajectory:
  enabled: true                   # Enable trajectory generation
  trajectory_type: "sine_accel_nonlinear"  # Type of trajectory
  trajectory_length: 100          # Length of trajectory
  save_trajectory: true           # Save trajectory data
  
  # Sine acceleration non-linear model parameters
  sine_accel_omega0: 0.05         # Base angular velocity (rad/s) - reduced to be more stable
  sine_accel_kappa: 1.0           # Sine acceleration coefficient (rad/sÂ²) - reduced to be more stable
  sine_accel_noise_std: 0.1       # Noise standard deviation (rad) - reduced to be more stable
  
  # Multiplicative noise non-linear model parameters (not used with sine_accel_nonlinear type)
  mult_noise_omega0: 0.2          # Base angular velocity (rad/s)
  mult_noise_amp: 0.8             # Amplitude of multiplicative term
  mult_noise_base_std: 0.2        # Base noise standard deviation (rad)
  
# Kalman filter configuration
kalman_filter:
  filter_type: "extended"         # Type of Kalman filter: "standard" or "extended"
  process_noise_std_dev: null     # Use trajectory random walk std dev
  measurement_noise_std_dev: 0.5  # Measurement noise standard deviation (degrees)
  initial_covariance: 1.0         # Initial state covariance 